services:
  # The database instance to monitor
  monitordb:
    image: timescale/timescaledb-ha:pg16
    container_name: monitordb
    environment:
      POSTGRES_DB: test
      POSTGRES_PASSWORD: ${TESTDB_PASSWORD:-password}
    ports:
      - "5432:5432"
    networks:
      - pgnet
    volumes:
      - ./defaults/monitordb/init-scripts:/docker-entrypoint-initdb.d
      - ./defaults/monitordb/postgresql.conf:/etc/postgresql/postgresql.conf
      - monitordb_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Destination Database. Where we will keep collected data.
  pgtrackerdb:
    image: timescale/timescaledb-ha:pg16
    container_name: pgtrackerdb
    environment:
      POSTGRES_DB: pgtracker
      POSTGRES_PASSWORD: ${DESTDB_PASSWORD:-password}
    ports:
      - "5433:5432"
    networks:
      - pgnet
    volumes:
      - pgtrackerdb_data:/var/lib/postgresql/data
      - ./defaults/pgtrackerdb/init-scripts:/docker-entrypoint-initdb.d
      - ./defaults/pgtrackerdb/postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - pgnet
    volumes:
      - ./defaults/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./defaults/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_SERVER_HTTP_PORT=3000
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Start up localstack for s3 and sqs simulation, and precreate the bucket and queue
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566-4599:4566-4599"
    environment:
      - SERVICES=s3,sqs,cloudwatch,ec2
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - pgnet

  # Create the S3 bucket and SQS queue, if they don't exist
  localstack-init:
    image: amazon/aws-cli
    container_name: localstack-init
    depends_on:
      - localstack
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - ./defaults/localstack/init-aws.sh:/init-aws.sh
    entrypoint: ["/bin/bash", "/init-aws.sh"]
    networks:
      - pgnet

  # Collector service
  collector:
    build:
      context: ./collector
      dockerfile: Dockerfile
    container_name: collector
    develop:
      watch:
        - action: rebuild
          path: collect.py
    volumes:
      - ./collector:/app
    depends_on:
      monitordb:
        condition: service_healthy
      pgtrackerdb:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - pgnet
    environment:
      - AWS_ACCESS_KEY_ID=fakeAccessKey
      - AWS_SECRET_ACCESS_KEY=fakeSecretKey
      - AWS_DEFAULT_REGION=us-east-1
    restart: unless-stopped

  # Aggregator service
  aggregator:
    build:
      context: ./aggregator
      dockerfile: Dockerfile
    container_name: aggregator
    develop:
      watch:
        - action: rebuild
          path: aggregate.py
    volumes:
      - ./aggregator:/app
    depends_on:
      pgtrackerdb:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - pgnet
    environment:
      - AWS_ACCESS_KEY_ID=fakeAccessKey
      - AWS_SECRET_ACCESS_KEY=fakeSecretKey
      - AWS_DEFAULT_REGION=us-east-1
    restart: unless-stopped

  # Load Generator service
  loadgenerator:
    build:
      context: ./defaults/loadgenerator
      dockerfile: Dockerfile
    container_name: loadgenerator
    ports:
      - "8089:8089"
    networks:
      - pgnet
    depends_on:
      monitordb:
        condition: service_healthy

networks:
  pgnet:
    driver: bridge

volumes:
  monitordb_data:
  pgtrackerdb_data:
  grafana_data:
